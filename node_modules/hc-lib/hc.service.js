var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { HttpParams } from "@angular/common/http";
var HcService = /** @class */ (function () {
    function HcService(http) {
        this.http = http;
        this.baseUrlPrefix = 'https://';
        this.baseUrlSuffix = '.hotwax.co/api/control';
        this.loginServiceRoute = '/getAuthenticationToken';
    }
    HcService.prototype.doLogin = function (url, username, password) {
        return this.http.post(this.baseUrlPrefix + url + this.baseUrlSuffix + this.loginServiceRoute, {}, { params: new HttpParams().set('USERNAME', username).append('PASSWORD', password),
            observe: 'response' });
    };
    HcService.prototype.doLogout = function () {
        localStorage.removeItem('token');
    };
    HcService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], HcService);
    return HcService;
}());
export { HcService };
//# sourceMappingURL=hc.service.js.map